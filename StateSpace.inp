function matrix Rmat(int trend, int slope, int seas, int pd)
    # this function returns a matrix mapping the stochastic shocks into the
    # state transition variance matrix: it has as many rows as the dimension
    # of the state vector and as many columns as the number of variances
    # to estimate

    ret = {}

    if trend == 1
        ret = diagcat(ret, 1)
    elif trend == 2
        ret = diagcat(ret, 0)
    endif

    if slope == 1
        ret = diagcat(ret, 1)
    elif slope == 2
        ret = diagcat(ret, 0)
    endif

    k = pd - 1
    if seas == 1
        ret = diagcat(ret, mshape({1,0}, k, 1))
    elif seas == 2
        ret = diagcat(ret, 1 | zeros(k-1, 1))
    elif seas == 3
        ret = diagcat(ret, zeros(k, 1))
    endif

    return selifc(ret, maxc(ret) .> 0)
end function


# 1.1 BSM transition matrix with particular cases:
# no slope/slope, no seasonal/seasonal trigon./seasonal dummies

function matrix Fseas(bool trig, scalar pd)
    if trig
        odd = pd % 2
        dim = pd - 1
        H = floor(pd/2) - 1 + odd
        ret = zeros(dim, dim)
        fin = 0
        loop i = 1..H
            ini = fin+1
            fin = ini+1
            scalar c = cos(2*$pi * i/pd)
            scalar s = sin(2*$pi * i/pd)
            ret[ini:fin, ini:fin] = {c, s; -s, c}
        endloop
        if !odd
            ret[H*2 + 1, H*2 + 1] = -1
        endif
    else
        # BSM transition matrix with dummy seasonals:
        ret = -ones(1, $pd-1) | (I($pd-2) ~ 0)
    endif
    return ret
end function

function matrix Fmat(int slope, int seasonal, scalar pd)
    matrix ret = slope ? { 1, 1; 0, 1 } : {1} # trend component
    if seasonal
        # seasonal component: 1 = trigonometric 2,3 = dummy
        ret = diagcat(ret, Fseas(seasonal==1, pd))
    endif
    return ret
end function


function matrices InitSystemMats(int trend, int slope, int seasonal,
                                 scalar *nStates, scalar *nVar)

    matrices ret = array(3)
    # in this order: F (statemat), R (uset for statevar)
    # H (obsmat)

    # Transition equation
    matrix ret[1] = Fmat(slope, seasonal, $pd)
    nStates = rows(ret[1]) # size of state vector
    
    # square matrix of var:
    matrix ret[2] = Rmat(trend, slope, seasonal, $pd)
    nVar = cols(ret[2])

    # measurement equation: matrix of the state vector
    matrix H = (slope) ? { 1; 0 } : {1} # trend component
    if seasonal == 1  # stochastic trigonometric terms
        H = H | mshape({1,0}, $pd - 1, 1)
    elif seasonal > 1 # dummy variables (stochastic and deterministic)
        H = H | 1 | zeros($pd-2, 1)
    endif
    ret[3] = H

    if rows(ret[2]) != nStates
        # sanity check
        printf "Mismatch! (nStates = %d)\n", nStates
        printf "statemat:\n%5.1f\n", ret[1]
        printf "R:\n%5.1f\n", ret[2]
        printf "obsmat:\n%5.1f\n", H
    endif

    return ret
end function

