# StrucTiSM_GUI.inp
# GUI wrappers and meta functions

function bundle STSM_GUImeta (series y "Dependent variable",
                              int spec[1:3:1] "Model" {"LL (local level)" \
      "LLT (local linear trend)" \
      "BSM (basic structural model)"},
      list X[null] "Exogenous explanatory variables",
      bool custom[0] "Custom model",
      int trend[1:2:1] "Custom Trend" {"Stochastic" "Deterministic"},
      int slope[0:2:1] "Custom Slope" {"None" "Stochastic" "Deterministic"}, \
      int seas[0:3:0] "Custom Seasonal" {"None" "Stochastic (trig)" \
      "Stochastic (dummies)" "Deterministic"},
      bool epsilon[1] "Custom Irregular",
      int fchoriz[0::0] "Forecast sample end range" )

    /*
       New in 0.6: fchoriz: this range at the end is reserved for the forecasts,
       i.e. the currently active sample is shortened for estimation.
    */

    # usual settings (LLT baseline)

    # override for some specs
    if !custom
        if spec == 1	# LL
            epsilon = 1
            trend   = 1
            slope   = 0
            seas    = 0
        elif spec == 2	# LLT
            epsilon = 1
            trend   = 1
            slope   = 1
            seas    = 0
        elif spec == 3 # BSM
            epsilon = 1
            trend   = 1
            slope   = 1
            seas    = 2
        endif
    endif

    if fchoriz && $nobs > fchoriz

        # first grab all exogenous values including for the fcast horizon
        # before we shorten the sample
        matrix fullmX = {}
        if nelem(X)
            fullmX = {X}
        endif

        # reserve the sample end for forecasting
        smpl +0 -fchoriz

    elif fchoriz
        funcerr "Not enough obs for chosen forecast horizon!"
    endif

    bundle model = STSM_setup(y, epsilon, trend, slope, seas, X)

    if fchoriz
        # add the exogenous values including out-of-sample
        # for potential forecasting (can be empty)
        matrix model.fullmX = fullmX
    endif

    if model.err
        printf "Error: %s\n", errmsg(model.err)
    else
        # this must be done by hand
        model.depvarname = argname(y)
        model.err = STSM_estimate(&model)
    endif

    if fchoriz
        smpl --full
        STSM_fcast(&model, fchoriz)
        smpl $t2-fchoriz+1 $t2

        series serfc = model.fcast	# workaround, directly to bundle gives error
        series serfcv = model.fcastvar
        series model.serfc = serfc
        series model.serfcv = serfcv
    endif

    return model

end function


##################

function string purify(string src, strings to_clean, strings to_sub)
    string l = ""
    string ret = ""
    scalar n = nelem(to_clean)

    if n == 0
        return src
    endif

    matrix len = zeros(1,n)
    loop i = 1..n
        len[i] = strlen(to_clean[i])
    endloop

    loop while getline(src, l)
        drop = 0
        # printf "%s\n", l
        loop i = 1..n
            scalar sl = len[i]
            m = strncmp(l, to_clean[i], sl)
            # printf "\t%s -> %d\n", to_clean[i], m
            if m == 0
                drop = i
                break
            endif
        endloop

        if drop
            if strlen(to_sub[i]) > 0
                ret += sprintf("%s\n", to_sub[i])
            endif
        else
            ret += sprintf("%s\n", l)
        endif

    endloop

    return ret

end function

##################

function void seas_plot(list y_lev, series sea, string name)
    fname  = "@dotdir/STSMtmp.gp"
    fname1 = "@dotdir/STSMtmp1.gp"
    fname2 = "@dotdir/STSMtmp2.gp"
    plot y_lev
        options time-series with-lines single-yaxis
        printf "set title \"%s and trend component\"", name
    end plot --output=@fname1
    plot sea
        options time-series with-lines
        literal set title "seasonal component"
    end plot --output=@fname2
    buf = sprintf("set multiplot\nset size 1, 0.5\nset origin 0.0, 0.5\n")
    buf ~= readfile(fname1)
    buf ~= sprintf("\nset origin 0.0, 0.0\n")

    f2 = readfile(fname2)
    a = defarray("set ylabel")
    b = defarray("unset ylabel")
    buf ~= sprintf("%s\nunset multiplot\n", purify(f2, a, b))

    outfile @fname --write
    printf "%s", buf
end outfile

gnuplot --input=@fname --output=display
end function

###################

function void STSM_GUIplot(bundle *model, int ptype[1:2:1] "Plot type" \
                           {"Estimation results", "Forecasts"} )

scalar ini = model.ini
scalar fin = model.fin
if ptype == 2 && !inbundle(model, "fcast")
    funcerr "No forecast results to plot"
endif

smpl ini fin
seasonal = model.seasonal > 0

## set up the series to be plotted
list G = null
string sername = model.depvarname
G += genseries(sername, model.depvar * model.scale)
list comps = STSM_components(model)

if ptype == 1
    string trendname = sername  ~ "_level"
    if model.nexog > 0
        string exoname = sername  ~ "_exo"
        series @trendname += @exoname
    endif
    G += @trendname

elif ptype == 2

    fin += rows(model.fcast)
    smpl ini fin
    string fcsername = sername~ "_fc"
    # series @fcsername = model.serfc
    G += genseries(fcsername, model.serfc) # @fcsername
    series fcse = sqrt(model.serfcv)
else
    funcerr "shouldn't happen"
endif

## And do the plot
if !seasonal && ptype == 1 # (seasonal plot not -yet?- supported for FC)
    plot G
        options time-series with-lines single-yaxis
    end plot --output=display
elif ptype == 2
    plot G
        options time-series with-lines single-yaxis
        literal set title "Out-of-sample forecast with 95% confidence band"
        options band=@fcsername,fcse,1.96 band-style=fill
    end plot --output=display

else	# seasonal ptype==1
    string seasname = sername  ~ "_seas"
    seas_plot(G, @seasname, sername)
endif
end function


#############
