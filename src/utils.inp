# Function index:
# set_horizon
# reparm
# inject
# scale_series
# adjust
# parlabels
# specification
# Xtract
# add_states_to_model
# qformvech


####################


function bundle default_model_bundle (void)
    /* Compile the default bundle holding model parameters */

    bundle self = null

    scalar self.err = FALSE
    scalar self.verbose = FALSE
    scalar self.error_in_obseq = TRUE          # formerly "epsilon"
    string self.type_trend = "deterministic"   # {"stochastic" "deterministic"}
    string self.type_slope = "none"  # {"none" "stochastic" "deterministic"}
    scalar self.pd = $pd

    bundle self.seasonal = null
    bundle self.seasonal.component_1 = null
    scalar self.seasonal.component_1.stochastic = FALSE
    string self.seasonal.component_1.type = "dummy"    # {"dummy", "trigonometric"}
    scalar self.seasonal.component_1.frequency = $pd

    scalar self.nStates = NA
    scalar self.nVar = NA       # number of variances to estimate
    scalar self.y_scaling_factor = NA

    return self
end function


function void check_seasonality (bundle *self)
    /* Check if dataset has seasonality. If not, reset seasonal bundle. */

    if nelem(self.seasonal.component_1) > 0 && ($pd == 1)
        print "The dataset has no seasonality. Specified seasonality will be ignored."
        self.seasonal.component_1 = null
    endif
end function


function bundle get_sample_details (const series y, const list xlist[null])
    /* Get sample start and end.
    return: bundle, holding index of start and end date */

    bundle self

    list Z = y xlist
    series okobs = zeromiss(ok(Z))
    scalar self.sample_start_index = xmax(firstobs(okobs), $t1)
    scalar self.sample_end_index = xmin(lastobs(okobs), $t2)


    return self
end function

function string get_sample_string (const int start_index,
                                   const int end_index)
    return sprintf("%s - %s", obslabel(start_index), obslabel(end_index))
end function


function scalar stochastic_season_exists (const bundle self)
    /* code description
    return: type, description */

    scalar ret = 0
    strings components = getkeys(self.seasonal)

    loop foreach i components
        if self.seasonal["$i"].stochastic == TRUE
            ret++
        endif
    endloop

    return (ret > 0) ? TRUE : FALSE
end function


function void get_xlist_details (list xlist, bundle *self)
    /* Add some details about xlist to bundle. */

    scalar self.nexog = nelem(xlist)

    if self.nexog
        list self.xlist = xlist
        string self.xnames = varname(xlist)
        matrix self.mX = {xlist}
    endif
end function


function scalar set_horizon(void)
    # some sensible defaults
    
    if $pd == 1
        horizon = 10
    elif ($pd == 4)
        horizon = 8
    elif ($pd == 5) || ($pd == 6) || ($pd == 7)
        horizon = 2 * $pd
    elif ($pd == 12)
        horizon = 12
    else
        horizon = $pd
    endif
    return horizon
end function


###
### Variance estimation: from (-infty, infty) to (0, infty) and vice versa
###

function matrix reparm( const matrix psi, int option[0:2:1],
                       bool inverse[0])
    set warnings off
    # this function returns _variances_ given params
    # option: 0 = abs 1 = square 2 = exp

    matrix ret = {}

    if option == 1
        # what goes into mle is std. devs
        ret = inverse ? sqrt(psi) : psi.^2
    elif option == 2
        # what goes into mle is log variances
        ret = inverse ? ln(psi) : exp(psi)
    else
        # what goes into mle is variances
        ret = abs(psi)
    endif


    return ret
end function

function scalar inject(matrix theta, bundle *kmod, bool eps,
                       scalar nVar, const matrix R, scalar mapping,
                       scalar nexog)

    # this function injects the mle parameters into the Kalman bundle,
    # given the characteristics of the model; returns an error value

    scalar err = 0
    ini = 1
    if eps
        kmod.obsvar = reparm(theta[1], mapping)
        ini++
    endif
    fin = ini + nVar - 1

    kmod.statevar[diag] = R * reparm(theta[ini:fin], mapping)
    if nexog > 0
        ini = fin + 1
        fin = fin + nexog
        kmod.obsxmat = theta[ini:fin]
    endif
    return err
end function

function series scale_series (const series y,
                              bundle *self)
    # TODO: For now

    self.y_scaling_factor = sd(y) / 100
    series ret = y / self.y_scaling_factor

    if self.verbose
        printf "Info: Scale for dependent variable = %g\n",\
            self.y_scaling_factor
    endif

    return ret
end function

function matrices adjust(matrix coeff, matrix vcv, scalar scale,
                         int mapping, scalar nexog)
    # this function re-maps the parameters used in "mle" into standard
    # deviations, in the orginal unit of measurement; ret[1] contains the
    # parameters, ret[2] their vcv (computed via the delta method)

    matrices ret = array(2)
    k = rows(coeff) - nexog
    vc = coeff[1:k]
    se_unscaled = sqrt(reparm(vc, mapping))
    ret[1] = se_unscaled * scale

    # the Jacobian
    if mapping == 0
        matrix J = 0.5 * scale ./ se_unscaled
    elif mapping == 1
        matrix J = mshape(scale, k, 1)
    elif mapping == 2
        matrix J = 0.5 .* ret[1]
    endif

    ret[2] = vcv[1:k,1:k] .* (J*J')

    if nexog
        betas = coeff[k+1:k+nexog] * scale
        ret[1] |= betas
        ret[2] = diagcat(ret[2], scale^2 * vcv[k+1:k+nexog,k+1:k+nexog])
    endif

    return ret
end function

function strings parlabels(bool epsilon, int trend, int slope,
                           int seasonal, bool has_exog)
    strings ret = array(0)
    if epsilon
        ret += "Irregular"
    endif

    if trend == 1
        ret += "Trend"
    endif

    if slope == 1
        ret += "Slope"
    endif

    if seasonal == 1
        ret += "Seasonal (trig)"
    elif seasonal == 2
        ret += "Seasonal (dums)"
    endif

    # if has_exog
    #     ret += "Exogenous"
    # endif

    return ret
end function

function string specification(bool epsilon, int trend, int slope,
                              int seasonal)

    string ret = ""

    if trend == 1
        ret = "Stochastic trend"
    elif trend == 2
        ret = "Deterministic trend"
    endif

    if slope == 0
        ret = ret ~ ", no slope"
    elif slope == 1
        ret = ret ~ ", stochastic slope"
    elif slope == 2
        ret = ret ~ ", deterministic slope"
    endif

    if seasonal == 1
        ret = ret ~ ", trigonometric seasonals"
    elif seasonal == 2
        ret = ret ~ ", dummy seasonals (stoch.)"
    elif seasonal == 3
        ret = ret ~ ", dummy seasonals (det.)"
    endif

    if epsilon
        if strlen(ret) > 50
            ret = sprintf("%s,\nirregular component", ret)
        else
            ret = ret ~ ", irregular component"
        endif
    endif

    return ret
end function

function matrix Xtract(int slope, int seasonal, scalar pd)

    # this function creates an n x k matrix, which extracts
    # the components to export from the state vector

    # the level is always there, either deterministic or stochastic
    matrix ret = {1}

    if slope > 0
        ret = diagcat(ret, 1)
    endif

    if seasonal == 1
        ret = diagcat(ret, mshape({1,0}, pd-1, 1))
    elif seasonal == 2 || seasonal == 3
        ret = diagcat(ret, 1 | zeros(pd-2, 1))
    endif

    return ret
end function

function scalar add_states_to_model(bundle *model, const matrix J)

    # does model contain estimates at all?
    if !inbundle(model, "St")
        printf "Error!\n"
        return 0
    endif

    strings compnames = null
    strings compdescs = null
    scalar k = 1
    scalar has_eps = model.epsilon
    scalar ini = model.ini
    scalar fin = model.fin
    smpl ini fin

    # initialise the "residuals"
    if has_eps
        series eps = model.depvar * model.scale
    endif

    # "name" holds the outer name of the dependent variable
    name = model.depvarname
    nStates = model.nStates
    pd = model.pd
    matrix St = model.St * J

    # do the level ---------------------------------------------
    string sername = name ~ "_level"
    genseries(sername, St[,1])
    compnames += sername
    compdescs += "Trend level"
    model[sername] = @sername

    if has_eps
        series eps -= @sername
    endif

    # do the slope, if present ---------------------------------
    if model.slope == 1
        k++
        sername = name ~ "_slope"
        genseries(sername, St[,k])
        compnames += sername
        compdescs += "Slope"
        model[sername] = @sername
    elif model.slope == 2
        # just skip the deterministic slope
        k++
    endif

    # do the seasonal, if present ------------------------------
    if model.seasonal >= 1
        k++
        # printf "(seasonal) k = %d\n", k
        sername = name ~ "_seas"
        genseries(sername, St[,k])
        compnames += sername
        if model.seasonal == 1
            compdescs += "Seasonal (with trigon. terms)"
        elif model.seasonal > 1
            compdescs += "Seasonal (with dummies)"
        endif
        model[sername] = @sername
        if has_eps
            series eps -= @sername
        endif
    endif

    # do the exogenous component, if present ---------------------
    if model.nexog >= 1
        k++
        nVar = model.nVar
        sername = name ~ "_exo"

        beta = model.coeff[has_eps + model.nVar + 1:]
        genseries(sername, model.mX * beta)
        compnames += sername
        compdescs += "Exogenous"
        model[sername] = @sername
        if has_eps
            series eps -= @sername
        endif
    endif

    # finalise the irregular component, if present --------------
    if has_eps
        k++
        sername = name ~ "_irreg"
        genseries(sername, eps)
        compnames += sername
        compdescs += "Irregular"
        model[sername] = @sername
    endif

    # Add the names of the newly created series to the bundle
    strings model.compnames = compnames
    strings model.compdescs = compdescs

    return k
end function

function matrix qformvech(matrix X)
    # vech(X'AX) = P (X ** X)' Q vech(A) = G vech(A)
    # this function returns G

    n = rows(X)
    m = round(n * (n+1) / 2)
    s = seq(1,m)
    matrix P = vec(upper(unvech(s'))) .= s

    n = cols(X)
    m = round(n * (n+1) / 2)
    s = seq(1,m)
    matrix Q = vec(upper(unvech(s'))) .= s
    matrix Q = Q || vec(lower(unvech(s'))) .= s

    matrix ret = P'(X ** X) * Q
    return ret
end function
